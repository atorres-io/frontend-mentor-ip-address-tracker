{"version":3,"sources":["components/Header/Header.js","services/SchemeService.js","services/HttpService.js","services/GeoService.js","components/Main/Main.js","pages/Home/Home.js","App.js","utils/reportWebVitals.js","index.js"],"names":["Header","useEffect","preferDarkScheme","window","matchMedia","matches","call","url","a","method","type","body","fetch","headers","Accept","credentials","JSON","stringify","response","text","json","getGeoDatas","ip","geo","Promise","resolve","lat","location","lng","Main","useState","setUrl","center","setCenter","loading","setLoading","updateCenter","MapContainer","zoom","zoomControl","TileLayer","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAWeA,MARf,WAKC,OAJAC,qBAAU,eAIH,4B,4DCFKC,EACZC,OAAOC,YACPD,OAAOC,WAAW,gCAAgCC,QCRtCC,EAAI,uCAAG,WAAOC,EAAP,wBAAAC,EAAA,6DAAcC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,KAA5B,SACIC,MAAML,EAAK,CACjCE,OAAQA,EACRI,QAAS,CACRC,OAAQ,mBACR,eAAgB,oBAEjBC,YAAa,cACbJ,KAAMK,KAAKC,UAAUN,KARH,UACbO,EADa,OAUH,SAATR,EAVY,iCAUYQ,EAASC,OAVrB,4DAUoCD,EAASE,OAV7C,uGAAH,wDCGJC,EAAW,uCAAG,8BAAAb,EAAA,sEACTF,EAAK,wBAAyB,CAC9CG,OAAQ,MACRC,KAAM,SAHmB,cACpBY,EADoB,gBAMRhB,EAAK,GAAD,ODIH,uCCJG,+CDKA,mCCLA,sBAC8CgB,GACnE,CAAEb,OAAQ,MAAOC,KAAM,SARE,cAMpBa,EANoB,yBAWnBC,QAAQC,QAAQ,CAAEC,IAAKH,EAAII,SAASD,IAAKE,IAAKL,EAAII,SAASC,OAXxC,2CAAH,qDCwCTC,MA5Bf,WACC,MAAsBC,mBAAS,IAA/B,mBAAOvB,EAAP,KAAYwB,EAAZ,KACA,EAA4BD,mBAAS,CAAEJ,IAAK,KAAME,IAAK,OAAvD,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAYA,OAVAlC,qBAAU,WACT8B,EAAO7B,EHpBR,4EAGA,iEGkBmB,uCAAG,4BAAAM,EAAA,sEACCa,IADD,OACdW,EADc,OAEpBC,EAAUD,GACVG,GAAW,GAHS,2CAAH,oDAKlBC,KACE,IAGF,+BACEF,EACA,aAEA,cAACG,EAAA,EAAD,CAAcL,OAAQA,EAAQM,KAAM,GAAIC,aAAa,EAArD,SACC,cAACC,EAAA,EAAD,CAAWjC,IAAKA,SCpBNkC,MATf,WACC,OACC,qCACC,cAAC,EAAD,IACA,cAAC,EAAD,QCFYC,MAJf,WACC,OAAO,cAAC,EAAD,KCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAGzBb,M","file":"static/js/main.9f949603.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './Header.css';\n\nfunction Header() {\n\tuseEffect(() => {});\n\n\tconst something = () => {};\n\n\treturn <header></header>;\n}\n\nexport default Header;\n","export const DARK_MAP =\n\t'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png';\n\nexport const LIGHT_MAP =\n\t'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\n\nexport const preferDarkScheme =\n\twindow.matchMedia &&\n\twindow.matchMedia('(prefers-color-scheme: dark)').matches;\n","export const call = async (url, { method, type, body }) => {\n\tconst response = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tcredentials: 'same-origin',\n\t\tbody: JSON.stringify(body),\n\t});\n\treturn type === 'text' ? await response.text() : await response.json();\n};\n\nexport const CORS = 'https://cors-anywhere.herokuapp.com/';\nexport const API_KEY = 'at_XutrWCJhSHpANbD3ArkbSyvuGU0kI'; //... Set your api key so that the app works\n","//* Services\nimport { call, CORS, API_KEY } from './HttpService';\n\nexport const getGeoDatas = async () => {\n\tconst ip = await call('https://api.ipify.org', {\n\t\tmethod: 'GET',\n\t\ttype: 'text',\n\t});\n\n\tconst geo = await call(\n\t\t`${CORS}https://geo.ipify.org/api/v1?apiKey=${API_KEY}&ipAddress=${ip}`,\n\t\t{ method: 'GET', type: 'json' }\n\t);\n\n\treturn Promise.resolve({ lat: geo.location.lat, lng: geo.location.lng });\n};\n","import React, { useEffect, useState } from 'react';\nimport './Main.css';\n\n//* External Packages\nimport 'leaflet/dist/leaflet.css';\nimport { MapContainer, TileLayer } from 'react-leaflet';\n\n//* Services\nimport {\n\tpreferDarkScheme,\n\tDARK_MAP,\n\tLIGHT_MAP,\n} from '../../services/SchemeService';\nimport { getGeoDatas } from '../../services/GeoService';\n\nfunction Main() {\n\tconst [url, setUrl] = useState('');\n\tconst [center, setCenter] = useState({ lat: 50.5, lng: 30.5 });\n\tconst [loading, setLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tsetUrl(preferDarkScheme ? DARK_MAP : LIGHT_MAP);\n\t\tconst updateCenter = async () => {\n\t\t\tconst center = await getGeoDatas();\n\t\t\tsetCenter(center);\n\t\t\tsetLoading(false);\n\t\t};\n\t\tupdateCenter();\n\t}, []);\n\n\treturn (\n\t\t<main>\n\t\t\t{loading ? (\n\t\t\t\t'loading...'\n\t\t\t) : (\n\t\t\t\t<MapContainer center={center} zoom={15} zoomControl={false}>\n\t\t\t\t\t<TileLayer url={url} />\n\t\t\t\t</MapContainer>\n\t\t\t)}\n\t\t</main>\n\t);\n}\n\nexport default Main;\n","import React from 'react';\nimport './Home.css';\n\n//* Components\nimport Header from '../../components/Header/Header';\nimport Main from '../../components/Main/Main';\n\nfunction Home() {\n\treturn (\n\t\t<>\n\t\t\t<Header />\n\t\t\t<Main />\n\t\t</>\n\t);\n}\n\nexport default Home;\n","import React from 'react';\n\n//* Pages\nimport Home from './pages/Home/Home';\n\nfunction App() {\n\treturn <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport reportWebVitals from './utils/reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nreportWebVitals();\n\n/*\nL.tileLayer('https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png', {\n\tmaxZoom: 18,\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n});*/\n"],"sourceRoot":""}